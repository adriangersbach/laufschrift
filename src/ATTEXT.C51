// Source File
// Filename: ATText.c51

/* Include - Files */
#include "System.h"
#include "ATText.h"

#include "Typeface.h"

//
// Text for Static Display
//                            123456789012345
//                            012345676543210
static uchar code TEXT0[] = {"               "};
static uchar code TEXT1[] = {"Merry Christmas"};
static uchar code TEXT2[] = {"      and      "};
static uchar code TEXT3[] = {"       a       "};
static uchar code TEXT4[] = {"Happy New Year "};
static uchar code TEXT5[] = {"    2 0 0 2    "};

static uchar code TEXT6[] = {"Frohe Weihnacht"};
static uchar code TEXT7[] = {"    und ein    "};
static uchar code TEXT8[] = {" glueckliches  "};
static uchar code TEXT9[] = {"   neues Jahr  "};

static uchar code * data pText0_ENG[] = {TEXT0, TEXT1, TEXT2, TEXT3, TEXT4, TEXT5, TEXT0};
static uchar code * data pText0_GER[] = {TEXT0, TEXT6, TEXT7, TEXT8, TEXT9, TEXT5, TEXT0};

#define STATIC_TEXT_ENG_LEN sizeof(pText0_ENG) / sizeof(uchar code *) - 2
#define STATIC_TEXT_GER_LEN sizeof(pText0_GER) / sizeof(uchar code *) - 2

//
// Text for Move Text
//
static uchar code moveTEXT_GER[] = {"Frohe Weihnacht und ein glueckliches neues Jahr 2002"};
#define MOVE_TEXT_GER_LEN   sizeof(moveTEXT_GER) * ZEICHEN

static uchar code moveTEXT_ENG[] = {"Merry Christmas and a Happy New Year 2002"};
#define MOVE_TEXT_ENG_LEN   sizeof(moveTEXT_ENG) * ZEICHEN

//
// [?] character [5] roe's per character
//static uchar code uASCII[][5] = __ALL_ASCII;

static uchar data m_nSpalte = 0;
static uchar data m_nAscii = 0;

///////////////////////////////////////////////////////////////////////////////
// Get Text Len Int

const uint get_TextLenInt(uchar nTextID)
{
  switch (nTextID)
  {
    case MOVE_TEXT_ENG:
      return MOVE_TEXT_ENG_LEN;

    case MOVE_TEXT_GER:
      return MOVE_TEXT_GER_LEN;
  }
}


///////////////////////////////////////////////////////////////////////////////
// Get Text Len

const uchar get_TextLen(uchar nTextID)
{
  switch (nTextID)
  {
    case STATIC_TEXT_ENG:
      return STATIC_TEXT_ENG_LEN;
      
    case STATIC_TEXT_GER:
      return STATIC_TEXT_GER_LEN;
  }
}

///////////////////////////////////////////////////////////////////////////////
// Get TextRow

const uchar get_TextRow(uchar nTextID, uchar nRow, uchar nStringPos)
{
  switch (nTextID)
  {
    case STATIC_TEXT_ENG:
      return pText0_ENG[nRow][nStringPos];

    case STATIC_TEXT_GER:
      return pText0_GER[nRow][nStringPos];

    case MOVE_TEXT_ENG:
      return moveTEXT_ENG[nStringPos];

    case MOVE_TEXT_GER:
      return moveTEXT_GER[nStringPos];
  }
}

///////////////////////////////////////////////////////////////////////////////
// Get Ascii

void set_Ascii(uint nPos)
{
  m_nAscii = nPos / ZEICHEN;
  m_nSpalte = nPos - (m_nAscii) * ZEICHEN;
}

///////////////////////////////////////////////////////////////////////////////
// ascii2LCD

const uchar ascii2LCD(uchar nText, uchar nRow)
{
  uchar nAscii;

  nAscii = get_TextRow(nText, nRow, m_nAscii);

  if (m_nSpalte < 5)
  { 
    switch (nAscii)
    {
      case '0': case '1': case '2': case '3': case '4':
      case '5': case '6': case '7': case '8': case '9':

      case ':': case ';': case '<': case '=': case '>':
      case '?': case '@':

      case 'A': case 'B': case 'C': case 'D': case 'E':
      case 'F': case 'G': case 'H': case 'I': case 'J':
      case 'K': case 'L': case 'M': case 'N': case 'O':
      case 'P': case 'Q': case 'R': case 'S': case 'T':
      case 'U': case 'V': case 'W': case 'X': case 'Y':
      case 'Z':

      case '[': case '\\': case ']': case '^': case '_':
      case '`':

      case 'a': case 'b': case 'c': case 'd': case 'e':
      case 'f': case 'g': case 'h': case 'i': case 'j':
      case 'k': case 'l': case 'm': case 'n': case 'o':
      case 'p': case 'q': case 'r': case 's': case 't':
      case 'u': case 'v': case 'w': case 'x': case 'y':
      case 'z':

      return uASCII[nAscii - '0'][m_nSpalte];
    }   // end_switch
  }

  return DISP_OFF;
}
